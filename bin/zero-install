#!/usr/bin/env node

var npm = require('npm'),
  path = require('path'),
  fs = require('fs'),
  fse = require('fs-extra'),
  _ = require('lodash'),
  async = require('async'),
  colors = require("colors"),
  program = require('commander'),
  spawn = require('win-spawn');

var cwd = process.cwd()
var modulePath = path.join(cwd, 'modules')
var nodeModulePath = path.join(cwd, 'node_modules')
var options = {
  registry : '-r, --registry'
}

var log = function(){
  var args = Array.prototype.slice.call(arguments, 0)
  console.log.apply( console, ['zero'.cyan].concat(args))
}


////////////////////
//        program
////////////////////
_.forEach(options, function( optionValue, optionKey ){
  program
    .option(`${optionValue} <${optionKey}>`)
})

  program.description("install a module and its dependencies").parse(process.argv)


var npmOptions = _.pick( program, Object.keys(options))
var moduleNames = program.args.slice(0)
var modulesToInstall = _.zipObject( moduleNames, _.fill(Array( moduleNames.length), 'latest'))

fse.ensureDirSync( modulePath )

if (moduleNames.length === 0) {

  //TODO 版本警告
  _.extend( modulesToInstall, _.get(fse.readJsonSync(path.join(cwd, 'package.json')), 'zero.dependencies', {}))

  log('installing zero modules', Object.keys(moduleNames))
  fs.readdirSync(modulePath).forEach(function (installedModule) {
    if (/^\./.test(installedModule)) return

    //TODO 版本冲突警告
    _.extend( modulesToInstall, _.get(fse.readJsonSync(path.join(modulePath, installedModule, 'package.json')), 'zero.dependencies', {}))
  })
}

log( "modulesToInstall", modulesToInstall )

install(modulesToInstall, function (err) {
  var semanticModuleNames = Object.keys(modulesToInstall).map(key=>`${key}@${modulesToInstall[key]}`)
  var message =`installation of ${semanticModuleNames} ${err?'failed' : 'finished'}`
  log( err ? message.red : message.cyan )
})


function install(modules, currentModuleInstalled) {

  async.forEachSeries( Object.keys(modules), function (moduleName, nextModule) {

    if (fs.existsSync(path.join(modulePath, moduleName))) {
      log(moduleName, "exists")
      return nextModule()
    }

    var npmModuleName = "zero-" + moduleName
    var version = modules[moduleName] ? `${modules[moduleName]}` : ''
    log("trying to npm install", `${npmModuleName}@${version}`)

    var optionStrArray = Object.keys(npmOptions).map(key=>`--${key}=${npmOptions[key]}`)
    log(`npm install ${npmModuleName}@${version} ${optionStrArray.join(' ')}`)
    var proc = spawn('npm', `install ${npmModuleName}@${version} ${optionStrArray.join(' ')}`.split(' '),{ stdio: 'inherit'})

    proc.on('error', function(err){
      log(("install " + npmModuleName).red, "failed, trace stack:")
      log(err.stack)
    })

    proc.on('close',function (code) {
      if( code !== 0 ) return nextModule({code})

      log(`install ${npmModuleName}@${version} ${optionStrArray.join(' ')} done with code ${code}` )
      //1. move module folder
      fs.renameSync(path.join(nodeModulePath, npmModuleName), path.join(modulePath, moduleName))

      //2. read zero dependencies«
      var dependencies = _.get(fse.readJsonSync(path.join(modulePath, moduleName, 'package.json')),'zero.dependencies', {})

      //TODO parse version
      //log( 'installing dependencies', dependencies,fse.readJsonSync(path.join(modulePath, moduleName, 'package.json')))
      log( 'installing dependencies', dependencies)
      if ( Object.keys(dependencies).length !== 0) {
        install(dependencies, nextModule)
      } else {
        nextModule()
      }
    })

  }, currentModuleInstalled)
}
